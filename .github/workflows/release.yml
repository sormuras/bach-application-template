name: release

on:
  workflow_dispatch:
    inputs:
      tag-version:
        description: 'Tag as version'
        required: true
        default: '1-ea'
      snapshot-pattern:
        description: 'Pre-release? (regex on version)'
        required: true
        default: '.*-ea'

env:
  VERSION: ${{ github.event.inputs.tag-version }}
  SNAPSHOT_PATTERN: ${{ github.event.inputs.snapshot-pattern }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: 'Build with Java ${{ matrix.java }} on ${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ] # , macOS-latest, windows-latest ]
        java: [ 16 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK'
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
      - name: 'Build with Bach'
        uses: sormuras/bach-build@v1
        with:
          bach-arguments: --project-version ${{ env.VERSION }} build
      - name: 'Rename the image'
        shell: bash
        run: mv .bach/workspace/image .bach/workspace/${{ github.event.repository.name }}-${{ env.VERSION }}-${{ runner.os }}
      - name: 'Zip the image'
        run: jar --create --file ${{ github.event.repository.name }}-${{ env.VERSION }}-${{ runner.os }}.zip -C .bach/workspace ${{ github.event.repository.name }}-${{ env.VERSION }}-${{ runner.os }}
      - name: 'Upload build artifact'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ${{ github.event.repository.name }}-${{ env.VERSION }}-${{ runner.os }}.zip

  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2
      - name: 'Display structure of downloaded files'
        run: ls -R
      - name: 'Set up JDK'
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'zulu'
      - name: 'Release with JReleaser'
        uses: jreleaser/release-action@v1
        with:
          version: early-access
        env:
          JRELEASER_PROJECT_VERSION: ${{ env.VERSION }}
          JRELEASER_SNAPSHOT_PATTERN: ${{ env.SNAPSHOT_PATTERN }}
          JRELEASER_GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      - name: 'Upload JReleaser output'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
